package mealplanner.dbHandler;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.SQLException;

public class TableManager {

    private static final Logger logger = LoggerFactory.getLogger(TableManager.class);
    private final Connection dbConnection = ConnectionManager.getConnection();

    public void createTable() {
        // SQL statement to create meals table
        String createMealsTable = "CREATE TABLE IF NOT EXISTS meals(" +
                "meal_id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY," +
                "category VARCHAR(255)," +
                "meal VARCHAR(255)" +
                ");";

        // SQL statement to create ingredients table
        String createIngredientsTable = "CREATE TABLE IF NOT EXISTS ingredients (" +
                "ingredient_id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY," +
                "ingredient VARCHAR(255)," +
                "meal_id INTEGER," +
                "FOREIGN KEY (meal_id) REFERENCES meals(meal_id) ON DELETE CASCADE" +
                ");";

        try (PreparedStatement createMealsTableStatement = dbConnection.prepareStatement(createMealsTable);
             PreparedStatement createIngredientsTableStatement = dbConnection.prepareStatement(createIngredientsTable)) {
            dbConnection.setAutoCommit(false);
            createMealsTableStatement.executeUpdate();
            createIngredientsTableStatement.executeUpdate();
            dbConnection.commit();
        } catch (SQLException e) {
            logger.error("Error while creating tables: {}, SQLState: {}", e.getMessage(), e.getSQLState());
            try {
                dbConnection.rollback();
                logger.info("Transaction rolled back successfully.");
            } catch (SQLException rollbackEx) {
                logger.error("Error during rollback: {}", rollbackEx.getMessage(), rollbackEx);
            }
        }
    }
}
